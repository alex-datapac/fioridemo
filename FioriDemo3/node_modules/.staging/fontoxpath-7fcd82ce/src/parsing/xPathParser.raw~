/**
 * @fileoverview
 * @suppress
 */

/*
 * Generated by PEG.js 0.9.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { XPath: peg$parseXPath },
        peg$startRuleFunction  = peg$parseXPath,

        peg$c0 = function(expr) {return expr},
        peg$c1 = ",",
        peg$c2 = peg$literalExpectation(",", false),
        peg$c3 = function(start, param) {return param},
        peg$c4 = function(start, rest) {return appendRest(["param", start], rest)},
        peg$c5 = "$",
        peg$c6 = peg$literalExpectation("$", false),
        peg$c7 = function(name, type) {return ["param", name, type]},
        peg$c8 = "{",
        peg$c9 = peg$literalExpectation("{", false),
        peg$c10 = "}",
        peg$c11 = peg$literalExpectation("}", false),
        peg$c12 = function(first, expr) {return expr},
        peg$c13 = function(first, rest) {return rest.length ? appendRest(["sequence", first], rest) : first},
        peg$c14 = "return",
        peg$c15 = peg$literalExpectation("return", false),
        peg$c16 = function(bindings, returnExpr) {
        	// The bindings part consists of the rangeVariable and the bindingSequence.
        	// Multiple bindings are syntactic sugar for 'let $x := 1 return let $y := $x * 2'
        	if (bindings.length === 1) return ["let"].concat(bindings[0], [returnExpr]);
        	return bindings.reduceRight(function (expression, binding) {
        	    return ["let"].concat(binding, [expression]);
        	  }, returnExpr)
          },
        peg$c17 = "let",
        peg$c18 = peg$literalExpectation("let", false),
        peg$c19 = ", ",
        peg$c20 = peg$literalExpectation(", ", false),
        peg$c21 = function(first, binding) {return binding},
        peg$c22 = function(first, rest) {return appendRest([first], rest)},
        peg$c23 = ":=",
        peg$c24 = peg$literalExpectation(":=", false),
        peg$c25 = function(rangeVariable, bindingSequence) {return [rangeVariable, bindingSequence]},
        peg$c26 = "some",
        peg$c27 = peg$literalExpectation("some", false),
        peg$c28 = "every",
        peg$c29 = peg$literalExpectation("every", false),
        peg$c30 = "in",
        peg$c31 = peg$literalExpectation("in", false),
        peg$c32 = function(kind, varName, exprSingle, name, expr) {return [name, expr]},
        peg$c33 = "satisfies",
        peg$c34 = peg$literalExpectation("satisfies", false),
        peg$c35 = function(kind, varName, exprSingle, restExpr, satisfiesExpr) {return ["quantified", kind, [[varName, exprSingle]].concat(restExpr), satisfiesExpr]},
        peg$c36 = "if",
        peg$c37 = peg$literalExpectation("if", false),
        peg$c38 = "(",
        peg$c39 = peg$literalExpectation("(", false),
        peg$c40 = ")",
        peg$c41 = peg$literalExpectation(")", false),
        peg$c42 = "then",
        peg$c43 = peg$literalExpectation("then", false),
        peg$c44 = "else",
        peg$c45 = peg$literalExpectation("else", false),
        peg$c46 = function(testExpr, thenExpr, elseExpr) {return ["conditional", testExpr, thenExpr, elseExpr]},
        peg$c47 = "or",
        peg$c48 = peg$literalExpectation("or", false),
        peg$c49 = function(first, rest) {return rest.length ? appendRest(['or', first], rest) : first},
        peg$c50 = "and",
        peg$c51 = peg$literalExpectation("and", false),
        peg$c52 = function(first, rest) {return rest.length ? appendRest(["and", first], rest) : first},
        peg$c53 = function(lhs, op, rhs) {return ["compare", op, lhs, rhs]},
        peg$c54 = "||",
        peg$c55 = peg$literalExpectation("||", false),
        peg$c56 = function(first, rest) {
             if (!rest.length) return first;
        	 var args = [first].concat(rest);
             return appendRest(["functionCall", ["namedFunctionRef", "concat", args.length], args])
           },
        peg$c57 = "to",
        peg$c58 = peg$literalExpectation("to", false),
        peg$c59 = function(lhs, rhs) {return rhs},
        peg$c60 = function(lhs, rhs) {return rhs === null ? lhs : ["functionCall", ["namedFunctionRef", "op:to", 2], [lhs, rhs]]},
        peg$c61 = "-",
        peg$c62 = peg$literalExpectation("-", false),
        peg$c63 = "+",
        peg$c64 = peg$literalExpectation("+", false),
        peg$c65 = function(lhs, op, rhs) {return ["binaryOperator", op, lhs, rhs]},
        peg$c66 = "*",
        peg$c67 = peg$literalExpectation("*", false),
        peg$c68 = "div",
        peg$c69 = peg$literalExpectation("div", false),
        peg$c70 = "idiv",
        peg$c71 = peg$literalExpectation("idiv", false),
        peg$c72 = "mod",
        peg$c73 = peg$literalExpectation("mod", false),
        peg$c74 = function(lhs, op) {return op},
        peg$c75 = "|",
        peg$c76 = peg$literalExpectation("|", false),
        peg$c77 = "union",
        peg$c78 = peg$literalExpectation("union", false),
        peg$c79 = function(first, rest) {return appendRest(["union", first], rest)},
        peg$c80 = "intersect",
        peg$c81 = peg$literalExpectation("intersect", false),
        peg$c82 = "except",
        peg$c83 = peg$literalExpectation("except", false),
        peg$c84 = function(lhs, type, rhs) {return ["op:"+type, rhs] },
        peg$c85 = function(lhs, rhs) {
             return rhs === null ? lhs : ["functionCall", ["namedFunctionRef", rhs[0], 2], [lhs, rhs[1]]]
           },
        peg$c86 = "instance",
        peg$c87 = peg$literalExpectation("instance", false),
        peg$c88 = "of",
        peg$c89 = peg$literalExpectation("of", false),
        peg$c90 = function(lhs, rhs) {return rhs ? ["instance of", lhs, rhs] : lhs},
        peg$c91 = "castable",
        peg$c92 = peg$literalExpectation("castable", false),
        peg$c93 = "as",
        peg$c94 = peg$literalExpectation("as", false),
        peg$c95 = function(lhs, rhs) {return rhs ? ["castable as", lhs, rhs] : lhs},
        peg$c96 = "cast",
        peg$c97 = peg$literalExpectation("cast", false),
        peg$c98 = function(lhs, rhs) {return rhs ? ["cast as", lhs, rhs] : lhs},
        peg$c99 = "=>",
        peg$c100 = peg$literalExpectation("=>", false),
        peg$c101 = function(lhs, functionName, argumentList) { return [functionName, argumentList]},
        peg$c102 = function(lhs, functionParts) {
             if (!functionParts.length) return lhs;
             return functionParts.reduce(function (previousFunction, functionPart) {
               var args = [previousFunction].concat(functionPart[1]);
               return ["functionCall", ["namedFunctionRef", functionPart[0], args.length], args];
             }, lhs);
           },
        peg$c103 = function(expr) {return ["unaryMinus", expr]},
        peg$c104 = function(expr) {return ["unaryPlus", expr]},
        peg$c105 = "=",
        peg$c106 = peg$literalExpectation("=", false),
        peg$c107 = "!=",
        peg$c108 = peg$literalExpectation("!=", false),
        peg$c109 = "<=",
        peg$c110 = peg$literalExpectation("<=", false),
        peg$c111 = "<",
        peg$c112 = peg$literalExpectation("<", false),
        peg$c113 = ">=",
        peg$c114 = peg$literalExpectation(">=", false),
        peg$c115 = ">",
        peg$c116 = peg$literalExpectation(">", false),
        peg$c117 = function(op) {return ["generalCompare", op]},
        peg$c118 = "eq",
        peg$c119 = peg$literalExpectation("eq", false),
        peg$c120 = "ne",
        peg$c121 = peg$literalExpectation("ne", false),
        peg$c122 = "lt",
        peg$c123 = peg$literalExpectation("lt", false),
        peg$c124 = "le",
        peg$c125 = peg$literalExpectation("le", false),
        peg$c126 = "gt",
        peg$c127 = peg$literalExpectation("gt", false),
        peg$c128 = "ge",
        peg$c129 = peg$literalExpectation("ge", false),
        peg$c130 = function(op) {return ["valueCompare", op]},
        peg$c131 = "is",
        peg$c132 = peg$literalExpectation("is", false),
        peg$c133 = function(op) {return op},
        peg$c134 = "<<",
        peg$c135 = peg$literalExpectation("<<", false),
        peg$c136 = ">>",
        peg$c137 = peg$literalExpectation(">>", false),
        peg$c138 = function(op) {return ["nodeCompare", op]},
        peg$c139 = "!",
        peg$c140 = peg$literalExpectation("!", false),
        peg$c141 = function(lhs, expr) { return expr },
        peg$c142 = function(lhs, parts) {
             if (!parts.length) return lhs;
             return parts.reduce(function (previousMap, expression) {
                 return ["simpleMap", previousMap, expression]
             }, lhs);
           },
        peg$c143 = function(lhs, abbrev, rhs) {return ["path",  lhs, ["path", abbrev, rhs]]},
        peg$c144 = "/",
        peg$c145 = peg$literalExpectation("/", false),
        peg$c146 = function(lhs, rhs) {return ["path", lhs, rhs]},
        peg$c147 = function(path) { return ["absolutePath", path] },
        peg$c148 = function(abbrev, path) { return ["absolutePath", ["path", abbrev, path]] },
        peg$c149 = "//",
        peg$c150 = peg$literalExpectation("//", false),
        peg$c151 = function() {return ["descendant-or-self", ["kindTest", "node()"]]},
        peg$c152 = function(axis, test, predicates) {
             if (!predicates.length) {
               return [axis, test];
             }
             return predicates.reduce(function (accumulator, current) { return ["filter", accumulator, current] }, [axis, test])
        //     return ["postfix", [axis, test], predicates]
           },
        peg$c153 = "::",
        peg$c154 = peg$literalExpectation("::", false),
        peg$c155 = function(name) { return name },
        peg$c156 = "@",
        peg$c157 = peg$literalExpectation("@", false),
        peg$c158 = function() {return "attribute"},
        peg$c159 = "",
        peg$c160 = function() { return "child" },
        peg$c161 = "ancestor-or-self",
        peg$c162 = peg$literalExpectation("ancestor-or-self", false),
        peg$c163 = "ancestor",
        peg$c164 = peg$literalExpectation("ancestor", false),
        peg$c165 = "attribute",
        peg$c166 = peg$literalExpectation("attribute", false),
        peg$c167 = "child",
        peg$c168 = peg$literalExpectation("child", false),
        peg$c169 = "decendant",
        peg$c170 = peg$literalExpectation("decendant", false),
        peg$c171 = "following-sibling",
        peg$c172 = peg$literalExpectation("following-sibling", false),
        peg$c173 = "descendant-or-self",
        peg$c174 = peg$literalExpectation("descendant-or-self", false),
        peg$c175 = "descendant",
        peg$c176 = peg$literalExpectation("descendant", false),
        peg$c177 = "following",
        peg$c178 = peg$literalExpectation("following", false),
        peg$c179 = "parent",
        peg$c180 = peg$literalExpectation("parent", false),
        peg$c181 = "preceding-sibling",
        peg$c182 = peg$literalExpectation("preceding-sibling", false),
        peg$c183 = "self",
        peg$c184 = peg$literalExpectation("self", false),
        peg$c185 = "..",
        peg$c186 = peg$literalExpectation("..", false),
        peg$c187 = function() { return ["parent", ["kindTest", "node()"]] },
        peg$c188 = function(nameTest) {return ["nameTest", nameTest]},
        peg$c189 = function(expr, filter) {return ["filter", filter]},
        peg$c190 = function(expr, argList) {return ["functionCall", argList]},
        peg$c191 = function(expr, lookup) {return ["lookup", lookup]},
        peg$c192 = function(expr, postfixExpr) {return postfixExpr.length ? postfixExpr.reduce(function (accumulator, currentExpr) { currentExpr.splice(1, 0, accumulator); return currentExpr; }, expr) : expr},
        peg$c193 = function(first, arg) {return arg},
        peg$c194 = function(args) {return args||[]},
        peg$c195 = "[",
        peg$c196 = peg$literalExpectation("[", false),
        peg$c197 = "]",
        peg$c198 = peg$literalExpectation("]", false),
        peg$c199 = function(e) {return e},
        peg$c200 = "?",
        peg$c201 = peg$literalExpectation("?", false),
        peg$c202 = function(key) {return key},
        peg$c203 = /^[a-zA-Z]/,
        peg$c204 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c205 = function(literal) {return literal},
        peg$c206 = function(varName) {return ["varRef", varName]},
        peg$c207 = function() {return ["sequence"]},
        peg$c208 = ".",
        peg$c209 = peg$literalExpectation(".", false),
        peg$c210 = function() { return ["self", ["kindTest", "item()"]] },
        peg$c211 = function(name, args) {return ["functionCall", ["namedFunctionRef", name, args.length], args]},
        peg$c212 = function() {return "argumentPlaceholder"},
        peg$c213 = "#",
        peg$c214 = peg$literalExpectation("#", false),
        peg$c215 = function(name, integer) {return ["namedFunctionRef", name, integer[1]]},
        peg$c216 = "function",
        peg$c217 = peg$literalExpectation("function", false),
        peg$c218 = function(params, body) {return ["inlineFunction", params, [], body]},
        peg$c219 = function(params, type, body) {return ["inlineFunction", params, type, body]},
        peg$c220 = function(typeName, multiplicity) {return ["type", typeName, !!multiplicity]},
        peg$c221 = " as ",
        peg$c222 = peg$literalExpectation(" as ", false),
        peg$c223 = "empty-sequence()",
        peg$c224 = peg$literalExpectation("empty-sequence()", false),
        peg$c225 = function(type, occurence) { return [type, occurence] },
        peg$c226 = "item()",
        peg$c227 = peg$literalExpectation("item()", false),
        peg$c228 = function(typeName) { return ["typeTest", typeName] },
        peg$c229 = function() { return "unsupported"},
        peg$c230 = function(call) { return ["deprecationWarning", call] },
        peg$c231 = "node()",
        peg$c232 = peg$literalExpectation("node()", false),
        peg$c233 = function() {return ["kindTest", "node()"]},
        peg$c234 = "document-node(",
        peg$c235 = peg$literalExpectation("document-node(", false),
        peg$c236 = function(innerTest) {return ["kindTest", "document-node()", innerTest]},
        peg$c237 = "document-node()",
        peg$c238 = peg$literalExpectation("document-node()", false),
        peg$c239 = function() {return ["kindTest", "document-node()"]},
        peg$c240 = "text()",
        peg$c241 = peg$literalExpectation("text()", false),
        peg$c242 = function() {return ["kindTest", "text()"]},
        peg$c243 = "comment()",
        peg$c244 = peg$literalExpectation("comment()", false),
        peg$c245 = function() {return ["kindTest", "comment()"]},
        peg$c246 = "namespace-node()",
        peg$c247 = peg$literalExpectation("namespace-node()", false),
        peg$c248 = function() {return ["kindTest", "namespace-node()"]},
        peg$c249 = "processing-instruction(",
        peg$c250 = peg$literalExpectation("processing-instruction(", false),
        peg$c251 = function(target) {return ["kindTest", "processing-instruction()", target]},
        peg$c252 = function(literal) {return ["kindTest", "processing-instruction()", literal[1]]},
        peg$c253 = "processing-instruction()",
        peg$c254 = peg$literalExpectation("processing-instruction()", false),
        peg$c255 = function() {return ["kindTest", "processing-instruction()"]},
        peg$c256 = "attribute(",
        peg$c257 = peg$literalExpectation("attribute(", false),
        peg$c258 = function(name, type) {return ["kindTest", "attribute()", name, type]},
        peg$c259 = function(name) {return ["kindTest", "attribute()", name]},
        peg$c260 = "attribute()",
        peg$c261 = peg$literalExpectation("attribute()", false),
        peg$c262 = function() {return ["kindTest", "attribute()"]},
        peg$c263 = "schema-attribute(",
        peg$c264 = peg$literalExpectation("schema-attribute(", false),
        peg$c265 = function(decl) {return ["kindTest", "schema-attribute()", decl]},
        peg$c266 = "element(",
        peg$c267 = peg$literalExpectation("element(", false),
        peg$c268 = function(name, type) {return ["kindTest", "element()", name, type]},
        peg$c269 = function(name) {return ["kindTest", "element()", name]},
        peg$c270 = "element()",
        peg$c271 = peg$literalExpectation("element()", false),
        peg$c272 = function() {return ["kindTest", "element()"]},
        peg$c273 = "schema-element(",
        peg$c274 = peg$literalExpectation("schema-element(", false),
        peg$c275 = "function (*)",
        peg$c276 = peg$literalExpectation("function (*)", false),
        peg$c277 = "map(*)",
        peg$c278 = peg$literalExpectation("map(*)", false),
        peg$c279 = "map(",
        peg$c280 = peg$literalExpectation("map(", false),
        peg$c281 = "array(*)",
        peg$c282 = peg$literalExpectation("array(*)", false),
        peg$c283 = "array(",
        peg$c284 = peg$literalExpectation("array(", false),
        peg$c285 = function(digits) {return ["literal", digits, "xs:integer"]},
        peg$c286 = function(digits) {return ["literal", parseFloat("." + digits, 10), "xs:decimal"]},
        peg$c287 = function(decimal) {return ["literal", parseFloat(decimal, 10), "xs:decimal"]},
        peg$c288 = /^[0-9]/,
        peg$c289 = peg$classExpectation([["0", "9"]], false, false),
        peg$c290 = /^[eE]/,
        peg$c291 = peg$classExpectation(["e", "E"], false, false),
        peg$c292 = /^[+\-]/,
        peg$c293 = peg$classExpectation(["+", "-"], false, false),
        peg$c294 = function(double) {return ["literal", parseFloat(double, 10), "xs:double"]},
        peg$c295 = "\"",
        peg$c296 = peg$literalExpectation("\"", false),
        peg$c297 = /^[^"]/,
        peg$c298 = peg$classExpectation(["\""], true, false),
        peg$c299 = function(contents) {return ["literal", contents.join(""), "xs:string"]},
        peg$c300 = "'",
        peg$c301 = peg$literalExpectation("'", false),
        peg$c302 = /^[^']/,
        peg$c303 = peg$classExpectation(["'"], true, false),
        peg$c304 = "Q",
        peg$c305 = peg$literalExpectation("Q", false),
        peg$c306 = /^[^{}]/,
        peg$c307 = peg$classExpectation(["{", "}"], true, false),
        peg$c308 = "\"\"",
        peg$c309 = peg$literalExpectation("\"\"", false),
        peg$c310 = function() {return "\""},
        peg$c311 = "''",
        peg$c312 = peg$literalExpectation("''", false),
        peg$c313 = function() {return "'"},
        peg$c314 = "(:",
        peg$c315 = peg$literalExpectation("(:", false),
        peg$c316 = ":)",
        peg$c317 = peg$literalExpectation(":)", false),
        peg$c318 = function(start, rest) {return start+rest.join('')},
        peg$c319 = "\t",
        peg$c320 = peg$literalExpectation("\t", false),
        peg$c321 = "\n",
        peg$c322 = peg$literalExpectation("\n", false),
        peg$c323 = "\r",
        peg$c324 = peg$literalExpectation("\r", false),
        peg$c325 = /^[ -\uD7FF]/,
        peg$c326 = peg$classExpectation([[" ", "\uD7FF"]], false, false),
        peg$c327 = /^[\uE000-\uFFFD]/,
        peg$c328 = peg$classExpectation([["\uE000", "\uFFFD"]], false, false),
        peg$c329 = /^[\u10000-\u10FFFF]/,
        peg$c330 = peg$classExpectation(["\u1000", ["0", "\u10FF"], "F", "F"], false, false),
        peg$c331 = function(digits) {return parseInt(digits.join(""), 10)},
        peg$c332 = ":",
        peg$c333 = peg$literalExpectation(":", false),
        peg$c334 = /^[A-Z]/,
        peg$c335 = peg$classExpectation([["A", "Z"]], false, false),
        peg$c336 = "_",
        peg$c337 = peg$literalExpectation("_", false),
        peg$c338 = /^[a-z]/,
        peg$c339 = peg$classExpectation([["a", "z"]], false, false),
        peg$c340 = /^[\-.0-9]/,
        peg$c341 = peg$classExpectation(["-", ".", ["0", "9"]], false, false),
        peg$c342 = " ",
        peg$c343 = peg$literalExpectation(" ", false),
        peg$c344 = "array",
        peg$c345 = peg$literalExpectation("array", false),
        peg$c346 = "comment",
        peg$c347 = peg$literalExpectation("comment", false),
        peg$c348 = "document-node",
        peg$c349 = peg$literalExpectation("document-node", false),
        peg$c350 = "element",
        peg$c351 = peg$literalExpectation("element", false),
        peg$c352 = "empty-sequence",
        peg$c353 = peg$literalExpectation("empty-sequence", false),
        peg$c354 = "item",
        peg$c355 = peg$literalExpectation("item", false),
        peg$c356 = "map",
        peg$c357 = peg$literalExpectation("map", false),
        peg$c358 = "namespace-node",
        peg$c359 = peg$literalExpectation("namespace-node", false),
        peg$c360 = "node",
        peg$c361 = peg$literalExpectation("node", false),
        peg$c362 = "processing-instruction",
        peg$c363 = peg$literalExpectation("processing-instruction", false),
        peg$c364 = "schema-attribute",
        peg$c365 = peg$literalExpectation("schema-attribute", false),
        peg$c366 = "schema-element",
        peg$c367 = peg$literalExpectation("schema-element", false),
        peg$c368 = "switch",
        peg$c369 = peg$literalExpectation("switch", false),
        peg$c370 = "text",
        peg$c371 = peg$literalExpectation("text", false),
        peg$c372 = "typeswitch",
        peg$c373 = peg$literalExpectation("typeswitch", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseXPath() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 109 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseParamList() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 109 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseParam();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c1;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c2); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseParam();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c3(s1, s6);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseParam() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 109 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTypeDeclaration();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEnclosedExpr() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 109 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c10;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 109 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseExprSingle();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c1;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c2); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExprSingle();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c12(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c1;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c2); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExprSingle();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c12(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseExprSingle() {
      var s0;

      var key    = peg$currPos * 109 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseLetExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseQuantifiedExpr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIfExpr();
          if (s0 === peg$FAILED) {
            s0 = peg$parseOrExpr();
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseLetExpr() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 109 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseSimpleLetClause();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c14) {
            s3 = peg$c14;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAssertAdjacentOpeningTerminal();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExprSingle();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c16(s1, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSimpleLetClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 109 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSimpleLetBinding();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c19) {
              s6 = peg$c19;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseSimpleLetBinding();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c21(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c19) {
                s6 = peg$c19;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseSimpleLetBinding();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c21(s3, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c22(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSimpleLetBinding() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 109 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s4 = peg$c23;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExprSingle();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c25(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseQuantifiedExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

      var key    = peg$currPos * 109 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c28) {
          s1 = peg$c28;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseS();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 36) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEQName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseS();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c30) {
                  s6 = peg$c30;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseS();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseExprSingle();
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s11 = peg$c1;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c2); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse_();
                        if (s12 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 36) {
                            s13 = peg$c5;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c6); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parseEQName();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parseS();
                              if (s15 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c30) {
                                  s16 = peg$c30;
                                  peg$currPos += 2;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                }
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parseS();
                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parseExprSingle();
                                    if (s18 !== peg$FAILED) {
                                      peg$savedPos = s10;
                                      s11 = peg$c32(s1, s4, s8, s14, s18);
                                      s10 = s11;
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s11 = peg$c1;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c2); }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 36) {
                              s13 = peg$c5;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c6); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseEQName();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parseS();
                                if (s15 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c30) {
                                    s16 = peg$c30;
                                    peg$currPos += 2;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parseS();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseExprSingle();
                                      if (s18 !== peg$FAILED) {
                                        peg$savedPos = s10;
                                        s11 = peg$c32(s1, s4, s8, s14, s18);
                                        s10 = s11;
                                      } else {
                                        peg$currPos = s10;
                                        s10 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseS();
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 9) === peg$c33) {
                            s11 = peg$c33;
                            peg$currPos += 9;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c34); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseS();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseExprSingle();
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c35(s1, s4, s8, s9, s13);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIfExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      var key    = peg$currPos * 109 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c38;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpr();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c40;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c41); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c42) {
                        s9 = peg$c42;
                        peg$currPos += 4;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseAssertAdjacentOpeningTerminal();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parse_();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseExprSingle();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parse_();
                              if (s13 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c44) {
                                  s14 = peg$c44;
                                  peg$currPos += 4;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parseAssertAdjacentOpeningTerminal();
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parse_();
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parseExprSingle();
                                      if (s17 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c46(s5, s12, s17);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOrExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 109 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAndExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s5 = peg$c47;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseAssertAdjacentOpeningTerminal();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseAndExpr();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c12(s1, s8);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c47) {
              s5 = peg$c47;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAssertAdjacentOpeningTerminal();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseAndExpr();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c12(s1, s8);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAndExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 109 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseComparisonExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c50) {
            s5 = peg$c50;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseAssertAdjacentOpeningTerminal();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseComparisonExpr();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c12(s1, s8);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c50) {
              s5 = peg$c50;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAssertAdjacentOpeningTerminal();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseComparisonExpr();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c12(s1, s8);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c52(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseComparisonExpr() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 109 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseStringConcatExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseValueComp();
          if (s3 === peg$FAILED) {
            s3 = peg$parseGeneralComp();
            if (s3 === peg$FAILED) {
              s3 = peg$parseNodeComp();
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseStringConcatExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c53(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseStringConcatExpr();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseStringConcatExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 109 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseRangeExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c54) {
            s5 = peg$c54;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRangeExpr();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c12(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c54) {
              s5 = peg$c54;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseRangeExpr();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c12(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRangeExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 109 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAdditiveExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c57) {
            s4 = peg$c57;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAssertAdjacentOpeningTerminal();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAdditiveExpr();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c59(s1, s7);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAdditiveExpr() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 109 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseMultiplicativeExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c61;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s3 = peg$c63;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAdditiveExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c65(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseMultiplicativeExpr();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseMultiplicativeExpr() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 109 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseUnionExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s3 = peg$c66;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c67); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c68) {
              s4 = peg$c68;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c70) {
                s4 = peg$c70;
                peg$currPos += 4;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c71); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c72) {
                  s4 = peg$c72;
                  peg$currPos += 3;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c73); }
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAssertAdjacentOpeningTerminal();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c74(s1, s4);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMultiplicativeExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c65(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnionExpr();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnionExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 109 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseIntersectExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c75;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c77) {
              s6 = peg$c77;
              peg$currPos += 5;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAssertAdjacentOpeningTerminal();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIntersectExpr();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c12(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s5 = peg$c75;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c77) {
                  s6 = peg$c77;
                  peg$currPos += 5;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseAssertAdjacentOpeningTerminal();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIntersectExpr();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c12(s1, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c79(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseIntersectExpr();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIntersectExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 109 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseInstanceofExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c80) {
            s4 = peg$c80;
            peg$currPos += 9;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c81); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c82) {
              s4 = peg$c82;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c83); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAssertAdjacentOpeningTerminal();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIntersectExpr();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c84(s1, s4, s7);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c85(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInstanceofExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 109 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCastableExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c86) {
            s4 = peg$c86;
            peg$currPos += 8;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseS();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c88) {
                s6 = peg$c88;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c89); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAssertAdjacentOpeningTerminal();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseSequenceType();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c59(s1, s9);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseCastableExpr();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCastableExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 109 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCastExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c91) {
            s4 = peg$c91;
            peg$currPos += 8;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c92); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseS();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c93) {
                s6 = peg$c93;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAssertAdjacentOpeningTerminal();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseSingleType();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c59(s1, s9);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c95(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCastExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 109 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseArrowExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c96) {
            s4 = peg$c96;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseS();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c93) {
                s6 = peg$c93;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAssertAdjacentOpeningTerminal();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseSingleType();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c59(s1, s9);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c98(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseArrowExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 109 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c99) {
            s5 = peg$c99;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c100); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseArrowFunctionSpecifier();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseArgumentList();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c101(s1, s7, s9);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c99) {
              s5 = peg$c99;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c100); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseArrowFunctionSpecifier();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseArgumentList();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s4 = peg$c101(s1, s7, s9);
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c102(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnaryExpr() {
      var s0, s1, s2;

      var key    = peg$currPos * 109 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c61;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryExpr();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c103(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 43) {
          s1 = peg$c63;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseUnaryExpr();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c104(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } els